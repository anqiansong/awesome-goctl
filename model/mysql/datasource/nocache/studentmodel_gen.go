// Code generated by goctl. DO NOT EDIT!

package nocache

import (
	"context"
	"database/sql"
	"fmt"
	"strings"
	"time"

	"github.com/zeromicro/go-zero/core/stores/builder"
	"github.com/zeromicro/go-zero/core/stores/sqlc"
	"github.com/zeromicro/go-zero/core/stores/sqlx"
	"github.com/zeromicro/go-zero/core/stringx"
)

var (
	studentFieldNames          = builder.RawFieldNames(&Student{})
	studentRows                = strings.Join(studentFieldNames, ",")
	studentRowsExpectAutoSet   = strings.Join(stringx.Remove(studentFieldNames, "`create_time`", "`update_time`", "`create_at`", "`update_at`"), ",")
	studentRowsWithPlaceHolder = strings.Join(stringx.Remove(studentFieldNames, "`type`", "`create_time`", "`update_time`", "`create_at`", "`update_at`"), "=?,") + "=?"
)

type (
	studentModel interface {
		Insert(ctx context.Context, data *Student) (sql.Result, error)
		FindOne(ctx context.Context, tp int64) (*Student, error)
		Update(ctx context.Context, data *Student) error
		Delete(ctx context.Context, tp int64) error
	}

	defaultStudentModel struct {
		conn  sqlx.SqlConn
		table string
	}

	Student struct {
		Type       int64           `db:"type"`
		Class      string          `db:"class"`
		Name       string          `db:"name"`
		Age        int64           `db:"age"`
		Score      sql.NullFloat64 `db:"score"`
		CreateTime time.Time       `db:"create_time"`
		UpdateTime sql.NullTime    `db:"update_time"`
	}
)

func newStudentModel(conn sqlx.SqlConn) *defaultStudentModel {
	return &defaultStudentModel{
		conn:  conn,
		table: "`student`",
	}
}

func (m *defaultStudentModel) Delete(ctx context.Context, tp int64) error {
	query := fmt.Sprintf("delete from %s where `type` = ?", m.table)
	_, err := m.conn.ExecCtx(ctx, query, tp)
	return err
}

func (m *defaultStudentModel) FindOne(ctx context.Context, tp int64) (*Student, error) {
	query := fmt.Sprintf("select %s from %s where `type` = ? limit 1", studentRows, m.table)
	var resp Student
	err := m.conn.QueryRowCtx(ctx, &resp, query, tp)
	switch err {
	case nil:
		return &resp, nil
	case sqlc.ErrNotFound:
		return nil, ErrNotFound
	default:
		return nil, err
	}
}

func (m *defaultStudentModel) Insert(ctx context.Context, data *Student) (sql.Result, error) {
	query := fmt.Sprintf("insert into %s (%s) values (?, ?, ?, ?, ?)", m.table, studentRowsExpectAutoSet)
	ret, err := m.conn.ExecCtx(ctx, query, data.Type, data.Class, data.Name, data.Age, data.Score)
	return ret, err
}

func (m *defaultStudentModel) Update(ctx context.Context, data *Student) error {
	query := fmt.Sprintf("update %s set %s where `type` = ?", m.table, studentRowsWithPlaceHolder)
	_, err := m.conn.ExecCtx(ctx, query, data.Class, data.Name, data.Age, data.Score, data.Type)
	return err
}

func (m *defaultStudentModel) tableName() string {
	return m.table
}
